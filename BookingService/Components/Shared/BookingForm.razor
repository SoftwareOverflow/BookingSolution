@using BookingService.Data
@using BookingService.Data.Booking
@using Core.Dto
@using Core.Dto.BookingRequest
@using Core.Interfaces

@inject IBookingService BookingService
@inject IMessageService MessageService
@inject IJSRuntime JsInterop

<LoadingSpinner Visible="_loading" />

<CascadingValue Value="this" Name="BookingParams">
            <EditForm class="w-100 h-100" Model="Model" OnValidSubmit="SaveBookingRequest">
                <ObjectGraphDataAnnotationsValidator />
                <div class="d-block d-sm-none h-100">
                    <BookingFormMobileContents />
                </div>

                <div class="d-none d-sm-block h-100">
                    <BookingFormContents />
                </div>

            </EditForm>
        </CascadingValue>

@code {
    [Parameter, EditorRequired]
    public BookingRequestModel Model { get; set; } = default!;

    [Parameter, EditorRequired]
    public ICollection<ServiceTypeDto> ServiceTypes { get; set; } = [];

    [Parameter, EditorRequired]
    public bool IsDemo { get; set; }


    [Parameter, EditorRequired]
    public EventCallback OnFormSubmitted { get; set; }

    private bool _loading = true;

    public AvailabilityDto? _timesDto { get; private set; } = null;

    public DateTime Today { get; private set; } = DateTime.Now;

    public List<TimeAvailability> TimesByDate(DateOnly? date) => _timesDto?.Availability.SingleOrDefault(x => x.Date == date)?.Times ?? [];

    private Tuple<DateTime, DateTime> _dateRange = new Tuple<DateTime, DateTime>(DateTime.Now, DateTime.Now);

    public DateTime StartDate => _dateRange.Item1;
    public DateTime EndDate => _dateRange.Item2;


    protected override async Task OnParametersSetAsync()
    {
        var localDate = await JavascriptHelpers.GetLocatDateAsync(JsInterop);
        Today = localDate ?? Today;

        _dateRange = DateHelpers.GetDateRange(Today);

        await base.OnParametersSetAsync();
        _loading = false;
    }

    public async Task OnServiceChange(ServiceTypeDto service)
    {
        _loading = true;
        Model.BookingRequest.Service = service;
        var next = BookingService.GetNextServiceDate(Model.BookingRequest.Service, DateOnly.FromDateTime(Today));
        if (next.IsSuccess)
        {
            Model.SelectedDateTime = next.Result.ToDateTime(new TimeOnly());
        }
        else if (Model.SelectedDateTime < Today)
        {
            Model.SelectedDateTime = Today;
        }

        await LoadAvailability();
        _loading = false;
    }

    public async Task OnDateChange(DateTime? date)
    {
        Model.BookingRequest.SelectedTime = null;

        if (date != null)
        {
            if (Model.SelectedDateTime?.Month != date?.Month)
            {
                await OnMonthChange(date);
            }

            Model.SelectedDateTime = date;
        }
    }

    public async Task OnMonthChange(DateTime? dt)
    {
        if (dt != null)
        {
            _dateRange = DateHelpers.GetDateRange(dt.Value);
            StateHasChanged();
            await LoadAvailability();
        }
    }

    private async Task LoadAvailability()
    {
        var start = StartDate;
        var end = EndDate;

        if (end.Date < Today.Date)
        {
            return;
        }

        if (start.Date < Today.Date)
        {
            start = Today;
        }

        _loading = true;
        await Task.Delay(500);
        var result = await BookingService.GetAvailabilityBetweenDates(Model.BookingRequest.Service!, Model.BookingRequest.BusinessGuid, DateOnly.FromDateTime(start), DateOnly.FromDateTime(end));
        if (result.IsSuccess)
        {
            _timesDto = result.Result!;
        }
        else
        {
            // TODO logging
            // TODO show error message
        }

        _loading = false;
        StateHasChanged();
    }

    private async Task SaveBookingRequest()
    {
        _loading = true;

        if (IsDemo)
        {
            await OnFormSubmitted.InvokeAsync();
        }
        else
        {
            var result = await BookingService.SendBookingRequest(Model!.BookingRequest, Model.BookingRequest.BusinessGuid);
            if (result.IsSuccess)
            {
                await OnFormSubmitted.InvokeAsync();
            }
            else
            {
                result.Errors.ForEach(x => MessageService.AddMessage(new MessageBase(x, MessageBase.MessageType.Warning)));
            }
        }

        _loading = false;
    }

    /*
    Potential performance improvements:
        - Split method to get the available days and available times
        - Get available days the whole month on month change.
        - Load selected date, then start loading (with cancellation token) each day in the month in background
        - If date changes, cancel long running background task and load current date.
        - Potentially store some information in cache in service.
    */
}
