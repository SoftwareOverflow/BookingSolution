@page "/{BusinessGuid:guid}/{ServiceGuid:guid}"

@using BookingService.Data.Booking
@using BookingService.Components.Shared
@using Core.Dto
@using Core.Interfaces
@using Microsoft.AspNetCore.Components.Rendering

@inject IBookingService BookingService
@inject IMessageService MessageService
@inject ISnackbar Snackbar

@implements IDisposable

<LoadingSpinner Visible="_loading" />
<div class="d-flex position-relative flex-column bg-light border-1 border-opacity-10 border-primary bg-light fix-aspect-ratio @_bgClass">
    <div class="position-absolute start-0 top-0 w-100 h-100">
        @if (_isError || _bookingRequest == null)
        {
            // TODO show error page
            <div class="d-flex flex-column justify-content-center text-center h-100">
                <p class="pt-3">An error occured, please try again.</p>
            </div>
        }
        else if (_requestSent)
        {
            <div class="d-flex flex-column justify-content-center text-center h-100">
                <div class="my-5">
                    <h3>@(IsDemo ? "Example - " : "")Booking Request Sent</h3>
                </div>
                <div class="d-flex flex-column justify-content-center">
                    <p class="lead">Your booking request has been sent to the business</p>
                    <p>You'll get an email once they confirm your booking</p>
                    <small>If you have any questions about your booking you should contact the business directly</small>
                </div>
            </div>
        }
        else
        {
            <BookingForm Model="_bookingRequest" IsDemo="IsDemo" OnRequestSent="OnRequestSent" />
        }
    </div>

    <div class="d-flex position-fixed bottom-0 end-0 m-3">
        <small>Powered by IndeBook</small>
    </div>
</div>

@code {
    [Parameter]
    public Guid? BusinessGuid { get; set; }

    [Parameter]
    public Guid? ServiceGuid { get; set; }

    private ServiceTypeDto? ServiceTypeDto { get; set; } = null;

    [SupplyParameterFromQuery]
    public Boolean IsDemo { get; set; } = false;

    private bool _loading = true;

    private bool _isError = false;

    private bool _requestSent = false;

    private string _bgClass => IsDemo ? "watermark" : "";

    private BookingRequestModel? _bookingRequest;

    protected override async Task OnParametersSetAsync()
    {
        _loading = true;

        if (BusinessGuid.HasValue && ServiceGuid.HasValue)
        {
            var result = await BookingService.GetNewBookingRequest(BusinessGuid.Value, ServiceGuid.Value);

            if (result.IsSuccess)
            {
                _bookingRequest = new BookingRequestModel(result.Result!);
            }
            else
            {
                // TODO logging
            }

        }

        _loading = false;

        await base.OnParametersSetAsync();
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            MessageService.AddMessageListener(OnMessage);
            Snackbar.Configuration.PositionClass = MudBlazor.Defaults.Classes.Position.TopCenter;
        }

        base.OnAfterRender(firstRender);
    }

    // TODO check that it's inside an iFrame
    // TODO check the referer header

    private void OnRequestSent()
    {
        _requestSent = true;
    }

    private void OnMessage(MessageBase message)
    {
        var severity = Severity.Normal;
        switch (message.Severity)
        {
            case MessageBase.MessageType.Success:
                severity = Severity.Success;
                break;
            case MessageBase.MessageType.Normal:
                severity = Severity.Normal;
                break;
            case MessageBase.MessageType.Warning:
                severity = Severity.Warning;
                break;
            case MessageBase.MessageType.Error:
                severity = Severity.Error;
                break;
        }

        Snackbar.Add(message.Message, severity);
    }

    public void Dispose()
    {
        MessageService.RemoveMessageListener(OnMessage);
    }
}
