@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Core.Dto
@using Core.Interfaces
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject IBusinessService BusinessService
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>


<div class="row">
    <StatusMessage Message="@Message" />
    <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
        <div class="row">
            <ObjectGraphDataAnnotationsValidator />
            <div class="col-md-4">
                <h2>Create Your Account.</h2>
                <hr />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.FirstName" class="form-control" autocomplete="given-name" aria-required="true" placeholder="First Name" />
                    <label for="given-name">First Name</label>
                    <ValidationMessage For="() => Input.FirstName" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Surname" class="form-control" autocomplete="family-name" aria-required="true" placeholder="Last Name" />
                    <label for="family-name">Last Name</label>
                    <ValidationMessage For="() => Input.Surname" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                    <label for="password">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                    <label for="confirm-password">Confirm Password</label>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                </div>
            </div>
            <div class="col-md-4">
                <h2>Tell Us About Your Business.</h2>
                <hr />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Business.Name" class="form-control" autocomplete="organization" aria-required="true" placeholder="Business Name" />
                    <label for="business-name">Business Name</label>
                    <ValidationMessage For="() => Input.Business.Name" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Business.Url" class="form-control" aria-required="true" placeholder="Website" />
                    <label for="website">Business Website</label>
                    <ValidationMessage For="() => Input.Business.Url" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Business.Address.Address1" class="form-control" autocomplete="address-line1" aria-required="true" placeholder="Building Name / Number" />
                    <label for="address-name">Buidling Name</label>
                    <ValidationMessage For="() => Input.Business.Address.Address1" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Business.Address.Address2" class="form-control" autocomplete="address-line2" aria-required="true" placeholder="Address Line 2..." />
                    <label for="address-line2">Street</label>
                    <ValidationMessage For="() => Input.Business.Address.Address2" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Business.Address.Address3" class="form-control" autocomplete="address-line3" aria-required="true" placeholder="Address Line 3..." />
                    <label for="address-level2">Address Line 3</label>
                    <ValidationMessage For="() => Input.Business.Address.Address3" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Business.Address.City" class="form-control" autocomplete="address-level2" aria-required="true" placeholder="City..." />
                    <label for="address-level2">City</label>
                    <ValidationMessage For="() => Input.Business.Address.City" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Business.Address.State" class="form-control" autocomplete="address-level1" aria-required="true" placeholder="County..." />
                    <label for="address-level1">County</label>
                    <ValidationMessage For="() => Input.Business.Address.State" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Business.Address.PostalCode" class="form-control" autocomplete="postal-code" aria-required="true" placeholder="password" />
                    <label for="postal-code">Postal Code</label>
                    <ValidationMessage For="() => Input.Business.Address.PostalCode" class="text-danger" />
                </div>
            </div>
            <div class="col-md-2 flex-column-center">
                <ValidationSummary class="text-danger" role="alert" />

                <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        user.FirstName = Input.FirstName;
        user.LastName = Input.Surname;

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        // Attempt to create the business for our new user. If this fails, the user will have to recreate it again later.
        /*
         * TODO can I make this a better user experience if this doesn't register correctly?
         * Currently thinking of checking in the main UI if the user has a business, and redirecting them if not.
         * However, this is all embedded in the form directly at the moment. WORK THIS OUT BEFORE RELEASE!
         */
        await BusinessService.RegisterBusiness(userId, Input.Business);

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        [Display(Name = "First Name")]
        public string FirstName { get; set; } = "";

        [Required]
        [Display(Name = "Surname")]
        public string Surname { get; set; } = "";

        [ValidateComplexType]
        public BusinessDto Business { get; set; } = new BusinessDto();
    }
}