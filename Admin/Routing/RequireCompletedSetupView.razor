@using Admin.Components.Pages
@using Admin.Components.Shared.Business
@using Admin.Components.Shared.Loading
@using Admin.Components.Shared.Setup
@using Admin.Data.Setup
@using Core.Dto
@using Core.Interfaces
@using Core.Responses

@inject ISetupService SetupService

<LoadingSpinner Visible="_loading" />

@if (_isSetupComplete)
{
    @SetupComplete
}
else
{
    <CascadingValue Value="_isSetupComplete">
        <Setup Model="_setupModel" />
    </CascadingValue>
}


@code {
    [Parameter, EditorRequired]
    public RenderFragment SetupComplete { get; set; } = default!;

    [CascadingParameter]
    public string? Username { get; set; }

    private SetupModel _setupModel = new SetupModel();

    private bool _isSetupComplete => _setupModel.IsSetupComplete;

    private bool _loading = true;

    protected override async Task OnParametersSetAsync()
    {
        _loading = true;

        if (!string.IsNullOrEmpty(Username))
        {
            _setupModel.SetStepComplete(SetupStep.CreateAccount);
        }

        var isBusinessRegistered = await SetupService.IsBusinessRegistered();
        var isBillingSetup = await SetupService.IsBillingSetup();
        var isServiceCreated = await SetupService.IsServiceCreated();

        ValidateSetupStep(SetupStep.RegisterBusiness, isBusinessRegistered);
        ValidateSetupStep(SetupStep.Billing, isBillingSetup);
        ValidateSetupStep(SetupStep.CreateService, isServiceCreated);

        _loading = false;
        await base.OnParametersSetAsync();
    }

    private void ValidateSetupStep(SetupStep step, ServiceResult<bool> result)
    {
        if (result.IsSuccess)
        {
            if(result.Result)
            {
                _setupModel.SetStepComplete(step);
            }
        }
        else
        {
            // TODO logging & error messages
        }
    }
}
