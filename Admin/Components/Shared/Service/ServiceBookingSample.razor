@using Admin.Data.Helpers
@using Core.Dto
@using Core.Interfaces
@using System.Web

@inject IJSRuntime Js
@inject IMessageService MessageService
@inject IBusinessService BusinessService

@if (Service != null && !string.IsNullOrEmpty(_businessGuid))
{
    <h4 class="mt-5 pt-5">Copy & Pate the following code block into your website:</h4>
    <section id="booking-form-embed" class="border-0 border-primary">
        <div class="d-flex flex-row justify-content-start align-items-center m-0 border-primary border-1 p-2 m-2">
            <span>
                <MudTooltip Text="Copy Code">
                    <button @onclick=CopyCode>
                        <span class="material-symbols-outlined pe-2">file_copy</span>
                    </button>
                </MudTooltip>
            </span>
            <span class="overflow-x-scroll">
                <pre class="d-inline-flex m-0">
                <code>@EmbedCode()</code>
                    </pre>
            </span>
        </div>
    </section>

    <p class="lead">The embedded form will look similar to this:</p>
    <div pb-2>
        @((MarkupString)EmbedCode("?IsDemo=true"))
    </div>
}


@code {
    [Parameter, EditorRequired]
    public ServiceTypeDto Service { get; set; }

    private string _businessGuid = "";

    // TODO change URL to config value
    string BookingUrl => $"https://localhost:7282/{_businessGuid}/{Service.Guid}";

    string EmbedCode(string urlParams = "") =>
            $@"<div style=""position: relative; padding-bottom: 45%; height: 0px; overflow: hidden;"">
    <iframe src=""{BookingUrl}{urlParams}"" style=""position: absolute; left:0; top: 0; width: 100%; height: 100%"" title=""Book Online through IndeBook"" />
</div>";

    protected override async Task OnParametersSetAsync()
    {
        var result = await BusinessService.GetBusinessForUser();
        if (result.IsSuccess)
        {
            _businessGuid = result.Result!.Guid.ToString();
        }
        else
        {
            // TODO logging
        }

        await base.OnParametersSetAsync();
    }

    private async Task CopyCode()
    {
        if (await JavascriptHelpers.CopyToClipboard(Js, EmbedCode()))
        {
            MessageService.AddMessage(new MessageBase("Copied to clipboard", MessageBase.MessageType.Success));
        }
        else
        {
            MessageService.AddMessage(new MessageBase("Failed to copy to clipboard", MessageBase.MessageType.Warning));
        }
    }
}
