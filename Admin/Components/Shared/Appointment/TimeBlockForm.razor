@using Admin.Components.Pages
@using Admin.Components.Shared.Dialog
@using Admin.Components.Shared.Loading
@using Admin.Components.Shared.Repeats
@using Admin.Data.Appointments.Model
@using Core.Dto
@using Core.Dto.Appointment
@using Core.Interfaces
@using Microsoft.AspNetCore.Components.Rendering

@inject ITimeBlockService TimeBlockService
@inject IDialogService DialogService
@inject IMessageService MessageService

<MudOverlay LightBackground Visible="_model.Appointment != null" Class="w-100 h-100">
    <MudPopoverProvider />
    <LoadingSpinner Visible="_loading" />

    <div class="container text-center position-relative bg-white bg-opacity-75 border-1 border-primary py-5">
        <button class="btn-lg material-symbols-outlined position-absolute top-0 end-0" @onclick="ShowUnsavedChangesDialog">close</button>
        <h2>@(Appointment.Guid == Guid.Empty ? "Create New Time Block" : "Manage Time Block")</h2>
        <EditForm Model="_model" class="flex-column-center" OnValidSubmit="SaveChangesAsync">
            <ObjectGraphDataAnnotationsValidator />

            <div class="row w-50 flex-row-center">
                <div class="form-floating px-0">
                    <InputText @bind-Value="_model.Name" class="form-control bg-light" aria-required="true" placeholder="Name" />
                    <label for="name">Name</label>
                    <ValidationMessage For="() => _model.Name" class="text-danger" />
                </div>
            </div>

            <div class="row flex-row-center">
                <div class="col-12 col-lg-6">
                    <div class="flex-row-center">
                        <span class="mud-form-label lead text-muted ms-2 text-end w-25">Start:</span>
                        <div class="me-5 w-fit-content">
                            <MudDatePicker @bind-Date="_model.StartDate" />
                        </div>
                        <div class="mx-5 w-fit-content">
                            <MudTimePicker @bind-Time="_model.StartTime" />
                        </div>
                    </div>
                </div>

                <div class="col-12 col-lg-6">
                    <div class="flex-row-center">
                        <span class="mud-form-label lead text-muted ms-2 text-end w-25">End:</span>
                        <div class="me-5 w-fit-content">
                            <MudDatePicker @bind-Date="_model.EndDate" />
                        </div>
                        <div class="mx-5 w-fit-content">
                            <MudTimePicker @bind-Time="_model.EndTime" />
                        </div>
                    </div>
                </div>

                <div class="flex-row-center">
                    <!-- This covers both start and end times ('end must be after start') so is on its own row -->
                    <ValidationMessage For="@(() => _model.Appointment!.EndTime)" />
                </div>
            </div>

            <div class="container">
                <div class="mx-2 my-2">
                    <RepeaterForm AllowOneOff="true" Repeater="_model.Repeater" />
                </div>
            </div>

            <div class="flex-row-center my-5 py-5">
                <button type="button" class="btn btn-lg btn-outline-secondary border-0 d-flex align-items-center mx-5" @onclick="ShowUnsavedChangesDialog">
                    <span class="mx-2 material-symbols-outlined">cancel</span>
                    Cancel
                </button>

                <div style="@(_model.Appointment!.Guid == Guid.Empty ? "display: none;" : "")">
                    <button type="button" class="btn btn-lg btn-outline-danger border-0 d-flex align-items-center mx-5" @onclick="Delete">
                        <span class="mx-2 material-symbols-outlined">delete</span>
                        Delete Appointment
                    </button>
                </div>

                @* TODO work out why the dates on Add Time Block are incorrect initially. It seems to bind OK, but does not start with the correct information. *@
                @* TODO copy serviceForm razor.css to style the base part of the form the same. *@

                <button type="submit" class="btn btn-lg btn-outline-success border-0 d-flex align-items-center mx-5">
                    <span class="mx-2 material-symbols-outlined">save</span>
                    @(_model.Appointment.Guid == Guid.Empty ? "Save" : "Save Changes")
                </button>
            </div>
        </EditForm>
    </div>
</MudOverlay>

@code {
    [Parameter, EditorRequired]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter, EditorRequired]
    public TimeBlockDto Appointment { get; set; } = new(string.Empty);

    private TimeBlockModel _model = new(new TimeBlockDto(string.Empty));

    private bool _loading = false;

    protected override void OnParametersSet()
    {
        _model = new TimeBlockModel(Appointment);
        base.OnParametersSet();
    }

    private async Task CloseOverlay(bool didEdit = false)
    {
        await OnClose.InvokeAsync(didEdit);
    }

    public async Task Delete()
    {
        if (_model.Appointment.Guid == Guid.Empty)
        {
            return;
        }

        var parameters = new DialogParameters<ConfirmationDialog>
        {
            { x => x.Warning, "This cannot be undone!" },
        };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>(null, parameters);
        var result = await dialog.Result;

        if (!result?.Canceled ?? false)
        {
            // var deleteResult = await TimeBlockService.DeleteAppointment(_model.Appointment.Guid);
            // if (deleteResult.IsSuccess)
            // {
            //     MessageService.AddMessage(new MessageBase(
            //            message: "Appointment deleted succesfully",
            //            severity: MessageBase.MessageType.Normal
            //    ));
            // }
            // else
            // {
            //     MessageService.AddMessage(new MessageBase(message: "Failed to delete appointment", severity: MessageBase.MessageType.Error));
            //     deleteResult.Errors.ForEach(e =>
            //     {
            //         MessageService.AddMessage(new MessageBase(message: e, severity: MessageBase.MessageType.Error));
            //     });
            // }


            await CloseOverlay(true);
        }
    }

    private async Task ShowUnsavedChangesDialog()
    {
        var dialog = await DialogService.ShowAsync<UnsavedChangesDialog>(null, new DialogOptions()
            {
                NoHeader = true,
            });
        var result = await dialog.Result;


        if (!result?.Canceled ?? false)
        {
            await CloseOverlay();
        }
    }

    public async Task SaveChangesAsync()
    {
        _model.MapRepeats();

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>(null, new DialogOptions()
            {
                NoHeader = true
            });

        var result = await dialog.Result;

        if (!result?.Canceled ?? false)
        {
            _loading = true;
            StateHasChanged();

            var isCreating = _model.Appointment.Guid == Guid.Empty;

            var saveResult = await TimeBlockService.CreateOrUpdateTimeBlock(_model.Appointment);
            if (saveResult.IsSuccess)
            {
                var message = isCreating ? "New Time Block Created" : "Changes Saved Succesfully";

                MessageService.AddMessage(new MessageBase(
                       message,
                        MessageBase.MessageType.Success));

                await CloseOverlay(true);
            }
            else
            {
                // TODO logging
                MessageService.AddMessage(new MessageBase("Failed to save changes", MessageBase.MessageType.Warning));
                saveResult.Errors.ForEach(e => MessageService.AddMessage(new MessageBase(e, MessageBase.MessageType.Error)));
            }
            _loading = false;
            StateHasChanged();
        }
    }
}
