@using Admin.Components.Pages
@using Admin.Components.Shared.Dialog
@using Admin.Components.Shared.Loading
@using Admin.Components.Shared.Repeats
@using Admin.Data.Appointments.Model
@using Core.Dto
@using Core.Dto.Appointment
@using Core.Interfaces
@using Microsoft.AspNetCore.Components.Rendering

@inject ITimeBlockService TimeBlockService
@inject IDialogService DialogService
@inject IMessageService MessageService

<MudOverlay LightBackground Visible="_model.Appointment != null" Class="w-100 h-100">
    <MudPopoverProvider />
    <LoadingSpinner Visible="_loading" />

    <div class="container text-center position-relative bg-white bg-opacity-75 border-1 border-primary py-5">
        <button class="btn-lg material-symbols-outlined position-absolute top-0 end-0" @onclick="ShowUnsavedChangesDialog">close</button>
        <h2>@(_model.Appointment!.Guid == Guid.Empty ? "Create New Time Block" : "Manage Time Block")</h2>
        <EditForm Model="_model" class="flex-column-center" OnValidSubmit="SaveChangesAsync">
            <ObjectGraphDataAnnotationsValidator />

            <BaseAppointmentForm Model="_model" />

            @if (!Instance.IsException)
            {
                <div class="container">
                    <div class="mx-2 my-2">
                        <RepeaterForm Repeater="_model.Repeater" AllowOneOff="true" />
                    </div>
                </div>

                @if (Instance.TimeBlockGuid != Guid.Empty)
                {
                    <MudAlert Class="m-2" Severity="Severity.Warning" Variant="Variant.Outlined">
                        <div class="d-flex flex-row">
                            Changes to repeats will reset any existing exceptions to the sequence!
                        </div>
                    </MudAlert>
                }
            }

            <div class="flex-row-center my-5 py-5">
                <button type="button" class="btn btn-lg btn-outline-secondary border-0 d-flex align-items-center mx-5" @onclick="ShowUnsavedChangesDialog">
                    <span class="mx-2 material-symbols-outlined">cancel</span>
                    Cancel
                </button>

                <div style="@(Instance.TimeBlockGuid == Guid.Empty ? "display: none;" : "")">
                    <button type="button" class="btn btn-lg btn-outline-danger border-0 d-flex align-items-center mx-5" @onclick="Delete">
                        <span class="mx-2 material-symbols-outlined">delete</span>
                        Delete Appointment
                    </button>
                </div>

                <button type="submit" class="btn btn-lg btn-outline-success border-0 d-flex align-items-center mx-5">
                    <span class="mx-2 material-symbols-outlined">save</span>
                    @(Instance.TimeBlockGuid == Guid.Empty ? "Save" : "Save Changes")
                </button>
            </div>
        </EditForm>
    </div>
</MudOverlay>

@code {
    [Parameter, EditorRequired]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter, EditorRequired]
    public required TimeBlockInstanceDto Instance { get; set; }

    private TimeBlockModel _model = new(new TimeBlockDto(string.Empty));

    private bool _loading = true;

    protected override async Task OnParametersSetAsync()
    {
        if (Instance.TimeBlockGuid != Guid.Empty)
        {
            var result = await TimeBlockService.GetTimeBlock(Instance.TimeBlockGuid);

            if (result.IsSuccess)
            {
                _model = new(result.Result!);
            }
            else
            {
                MessageService.AddMessage(new MessageBase("Failed to load Time Block", MessageBase.MessageType.Error));
                _loading = false;

                await CloseOverlay();
            }
        }
        else
        {
            _model = new(new TimeBlockDto(Instance.Name)
                {
                    StartTime = Instance.StartTime,
                    EndTime = Instance.EndTime
                });
        }

        await base.OnParametersSetAsync();

        _loading = false;
    }

    public async Task Delete()
    {
        if (_model.Appointment.Guid == Guid.Empty)
        {
            return;
        }

        var parameters = new DialogParameters<ConfirmationDialog>
        {
            { x => x.Warning, "This cannot be undone!" },
        };

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>(null, parameters);
        var result = await dialog.Result;

        if (!result?.Canceled ?? false)
        {
            // var deleteResult = await TimeBlockService.DeleteAppointment(_model.Appointment.Guid);
            // if (deleteResult.IsSuccess)
            // {
            //     MessageService.AddMessage(new MessageBase(
            //            message: "Appointment deleted succesfully",
            //            severity: MessageBase.MessageType.Normal
            //    ));
            // }
            // else
            // {
            //     MessageService.AddMessage(new MessageBase(message: "Failed to delete appointment", severity: MessageBase.MessageType.Error));
            //     deleteResult.Errors.ForEach(e =>
            //     {
            //         MessageService.AddMessage(new MessageBase(message: e, severity: MessageBase.MessageType.Error));
            //     });
            // }


            await CloseOverlay();
        }
    }

    private async Task ShowUnsavedChangesDialog()
    {
        var dialog = await DialogService.ShowAsync<UnsavedChangesDialog>(null, new DialogOptions()
            {
                NoHeader = true,
            });
        var result = await dialog.Result;


        if (!result?.Canceled ?? false)
        {
            await CloseOverlay();
        }
    }

    public async Task SaveChangesAsync()
    {
        _model.MapRepeats();

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>(null, new DialogOptions()
            {
                NoHeader = true
            });

        var result = await dialog.Result;

        if (!result?.Canceled ?? false)
        {
            _loading = true;
            StateHasChanged();

            if (!Instance.IsException)
            {
                await SaveTimeBlock();
            }
            else
            {
                await SaveTimeBlockException();
            }

            _loading = false;
            StateHasChanged();
        }
    }

    private async Task SaveTimeBlock()
    {
        var isCreating = Instance.TimeBlockGuid == Guid.Empty;

        var saveResult = await TimeBlockService.CreateOrUpdateTimeBlock(_model.Appointment);
        if (saveResult.IsSuccess)
        {
            var message = isCreating ? "New Time Block Created" : "Changes Saved Succesfully";

            MessageService.AddMessage(new MessageBase(
                   message,
                    MessageBase.MessageType.Success));

            await CloseOverlay();
        }
        else
        {
            // TODO logging
            MessageService.AddMessage(new MessageBase("Failed to save changes", MessageBase.MessageType.Warning));
            saveResult.Errors.ForEach(e => MessageService.AddMessage(new MessageBase(e, MessageBase.MessageType.Error)));
        }
    }

    private async Task SaveTimeBlockException()
    {
        // TODO
    }

    private async Task CloseOverlay()
    {
        // Assume we have changed the underlying object in some way (e.g. setting IsException), so force a reload.
        await OnClose.InvokeAsync(true);
    }
}
