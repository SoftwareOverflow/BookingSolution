@using Admin.Components.Pages
@using Admin.Components.Shared.Dialog
@using Admin.Components.Shared.Loading
@using Admin.Components.Shared.Repeats
@using Admin.Data.Appointments.Model
@using Core.Dto
@using Core.Dto.Appointment
@using Core.Interfaces
@using Core.Responses
@using Microsoft.AspNetCore.Components.Rendering

@inject ITimeBlockService TimeBlockService
@inject IDialogService DialogService
@inject IMessageService MessageService

<MudOverlay LightBackground Visible="_model.Appointment != null" Class="w-100 h-100">
    <MudPopoverProvider />
    <LoadingSpinner Visible="_loading" />

    <div class="container text-center position-relative bg-white bg-opacity-75 border-1 border-primary py-5">
        <button class="btn-lg material-symbols-outlined position-absolute top-0 end-0" @onclick="ShowUnsavedChangesDialog">close</button>
        <h2>@_title</h2>
        <EditForm Model="_model" class="flex-column-center" OnValidSubmit="SaveChangesAsync">
            <ObjectGraphDataAnnotationsValidator />

            <BaseAppointmentForm Model="_model" />

            @if (!Instance.IsException)
            {
                <div class="container">
                    <div class="mx-2 my-2">
                        <RepeaterForm Repeater="_model.Repeater" AllowOneOff="true" />
                    </div>
                </div>

                @if (Instance.TimeBlockGuid != Guid.Empty)
                {
                    <MudAlert Class="m-2" Severity="Severity.Warning" Variant="Variant.Outlined">
                        <div class="d-flex flex-row">
                            Changes to repeats will reset any existing exceptions to the sequence!
                        </div>
                    </MudAlert>
                }
            }

            <div class="flex-row-center my-5 py-5">
                <button type="button" class="btn btn-lg btn-outline-secondary border-0 d-flex align-items-center mx-5" @onclick="ShowUnsavedChangesDialog">
                    <span class="mx-2 material-symbols-outlined">cancel</span>
                    Cancel
                </button>

                <div style="@(!Instance.IsException && Instance.TimeBlockGuid == Guid.Empty ? "display: none;" : "")">
                    <button type="button" class="btn btn-lg btn-outline-danger border-0 d-flex align-items-center mx-5" @onclick="Delete">
                        <span class="mx-2 material-symbols-outlined">delete</span>
                        Delete Appointment
                    </button>
                </div>

                <button type="submit" class="btn btn-lg btn-outline-success border-0 d-flex align-items-center mx-5">
                    <span class="mx-2 material-symbols-outlined">save</span>
                    @(Instance.TimeBlockGuid == Guid.Empty ? "Save" : "Save Changes")
                </button>
            </div>
        </EditForm>
    </div>
</MudOverlay>

@code {
    [Parameter, EditorRequired]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter, EditorRequired]
    public required TimeBlockInstanceDto Instance { get; set; }

    private TimeBlockModel _model = new(new TimeBlockDto(string.Empty));

    private bool _loading = true;

    private string _title => Instance.IsException ? 
                (_model.Appointment.Guid != Guid.Empty ? "Manage Exception" : "Create Exception") : 
                (_model.Appointment.Guid != Guid.Empty ? "Manage Time Block" : "Create Time Block");

    protected override async Task OnParametersSetAsync()
    {
        if (Instance.IsException || Instance.TimeBlockGuid == Guid.Empty)
        {
            _model = new(new TimeBlockDto(Instance.Name)
                {
                    StartTime = Instance.StartTime,
                    EndTime = Instance.EndTime,
                    Guid = Instance.Guid,
                });
        }
        else
        {
            if (Instance.TimeBlockGuid != Guid.Empty)
            {
                var result = await TimeBlockService.GetTimeBlock(Instance.TimeBlockGuid);

                if (result.IsSuccess)
                {
                    _model = new(result.Result!);
                }
                else
                {
                    MessageService.AddMessage(new MessageBase("Failed to load Time Block", MessageBase.MessageType.Error));
                    _loading = false;

                    await CloseOverlay();
                }
            }
        }

        await base.OnParametersSetAsync();

        _loading = false;
    }

    public async Task Delete()
    {
        var hasExceptions = false;

        if (Instance.TimeBlockGuid != Guid.Empty)
        {
            var timeBlockResult = await TimeBlockService.GetTimeBlock(Instance.TimeBlockGuid);
            if (timeBlockResult.IsSuccess)
            {
                hasExceptions = timeBlockResult.Result!.Exceptions.Any();
            }
        }

        var deleteExceptions = false;
        DialogResult? result;
        if (Instance.IsException || !hasExceptions)
        {
            var parameters = new DialogParameters<ConfirmationDialog>
                {
                    { x => x.Warning, "This cannot be undone!" },
                };

            var dialog = await DialogService.ShowAsync<ConfirmationDialog>(null, parameters);
            result = await dialog.Result;
        }
        else
        {
            var parameters = new DialogParameters<OptionsDialog>
                {
                    { x => x.Title, "Delete exceptions to the sequence too?" },
                    { x => x.Content, "Would you like to delete exceptions for this sequence as well?" },
                    { x => x.Options, new Dictionary<string, Action>(){
                        { "Delete exceptions", () => { deleteExceptions = true; } },
                        { "Keep exceptions", () => { deleteExceptions = false; } },
                    }}
                };

            var dialog = await DialogService.ShowAsync<OptionsDialog>(null, parameters);
            result = await dialog.Result;
        }

        if (!result?.Canceled ?? false)
        {
            _loading = true;
            StateHasChanged();


            var deleteResult = await TimeBlockService.Delete(Instance, deleteExceptions);
            if (deleteResult.IsSuccess)
            {
                MessageService.AddMessage(new MessageBase(
                       message: "Time Block deleted succesfully",
                       severity: MessageBase.MessageType.Normal
               ));
            }
            else
            {
                MessageService.AddMessage(new MessageBase(message: "Failed to delete time block", severity: MessageBase.MessageType.Error));
                deleteResult.Errors.ForEach(e =>
                {
                    MessageService.AddMessage(new MessageBase(message: e, severity: MessageBase.MessageType.Error));
                });
            }

            _loading = false;
            StateHasChanged();

            await CloseOverlay();
        }
    }

    private async Task ShowUnsavedChangesDialog()
    {
        var dialog = await DialogService.ShowAsync<UnsavedChangesDialog>(null, new DialogOptions()
            {
                NoHeader = true,
            });
        var result = await dialog.Result;


        if (!result?.Canceled ?? false)
        {
            await CloseOverlay();
        }
    }

    public async Task SaveChangesAsync()
    {
        _model.MapRepeats();

        var dialog = await DialogService.ShowAsync<ConfirmationDialog>(null, new DialogOptions()
            {
                NoHeader = true
            });

        var result = await dialog.Result;

        if (!result?.Canceled ?? false)
        {
            _loading = true;
            StateHasChanged();

            if (!Instance.IsException)
            {
                await SaveTimeBlock();
            }
            else
            {
                await SaveTimeBlockException();
            }

            _loading = false;
            StateHasChanged();
        }
    }

    private async Task SaveTimeBlock()
    {
        var saveResult = await TimeBlockService.CreateOrUpdate(_model.Appointment);

        await HandleSaveResult(saveResult, "Time Block");
    }

    private async Task SaveTimeBlockException()
    {
        var exception = new TimeBlockExceptionDto(_model.Name)
            {
                DateToReplace = Instance.InstanceDate,
                Guid = Instance.Guid,
                StartTime = _model.Appointment.StartTime,
                EndTime = _model.Appointment.EndTime
            };

        var saveResult = await TimeBlockService.CreateOrUpdate(exception, Instance.TimeBlockGuid);
        await HandleSaveResult(saveResult, "Time Block Exception");
    }

    private async Task HandleSaveResult<T>(ServiceResult<T> saveResult, string item)
    {
        var isCreating = Instance.TimeBlockGuid == Guid.Empty;

        if (saveResult.IsSuccess)
        {
            var message = isCreating ? $"New {item} Created" : "Changes Saved Succesfully";

            MessageService.AddMessage(new MessageBase(
                   message,
                    MessageBase.MessageType.Success));

            await CloseOverlay();
        }
        else
        {
            // TODO logging
            MessageService.AddMessage(new MessageBase("Failed to save changes", MessageBase.MessageType.Warning));
            saveResult.Errors.ForEach(e => MessageService.AddMessage(new MessageBase(e, MessageBase.MessageType.Error)));
        }
    }

    private async Task CloseOverlay()
    {
        // Assume we have changed the underlying object in some way (e.g. setting IsException), so force a reload.
        await OnClose.InvokeAsync(true);
    }
}
