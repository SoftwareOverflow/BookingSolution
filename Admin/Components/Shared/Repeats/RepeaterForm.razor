@using Admin.Components.Shared.Scheduler
@using Admin.Data
@using Admin.Data.Helpers
@using Core.Dto

@inherits ClientDateComponent

<div class="border-1 border-primary">
    <div class="flex-row-center">
        <div class="btn-group" role="group" aria-label="repeat type">
            @if (AllowOneOff)
            {
                <input type="radio" class="btn-check" name="btn-repeat-type" id="btn-repeat-none" autocomplete="off" checked="@(Repeater.RepeatType == null)" @onchange="@(() => Repeater.RepeatType = null)" />
                <label class="btn btn-outline-primary" for="btn-repeat-none">One-Off</label>
            }

            <input type="radio" class="btn-check" name="btn-repeat-type" id="btn-repeat-weekly" autocomplete="off" checked="@(Repeater.RepeatType == RepeaterTypeDto.Weekly)" @onchange="@(() => Repeater.RepeatType = RepeaterTypeDto.Weekly)" />
            <label class="btn btn-outline-primary" for="btn-repeat-weekly">Weekly</label>

            <input type="radio" class="btn-check" name="btn-repeat-type" id="btn-repeat-monthly-exact" autocomplete="off" checked="@(Repeater.RepeatType == RepeaterTypeDto.MonthlyAbsolute)" @onchange="@(() => Repeater.RepeatType = RepeaterTypeDto.MonthlyAbsolute)" />
            <label class="btn btn-outline-primary" for="btn-repeat-monthly-exact">Monthly (By Date)</label>

            <input type="radio" class="btn-check" name="btn-repeat-type" id="btn-repeat-monthly-relative" autocomplete="off" checked="@(Repeater.RepeatType == RepeaterTypeDto.MonthlyRelative)" @onchange="@(() => Repeater.RepeatType = RepeaterTypeDto.MonthlyRelative)" />
            <label class="btn btn-outline-primary" for="btn-repeat-monthly-relative">Monthly (By Weekday)</label>
        </div>
    </div>

    <div class="flex-row-center">
        <small class="py-1">@GetHeader()</small>
    </div>

    @if (Repeater.RepeatType == RepeaterTypeDto.Weekly)
    {
        <div id="availability-weekly" class="availability text-center">
            <div class="flex-row-center justify-content-evenly">

                @for (int i = 0; i < 7; i++)
                {
                    var day = DateHelpers.StartOfWeek(ClientDate).AddDays(i);
                    <span class="flex-row-center">
                        <MudCheckBox @bind-Value="Repeater.WeeklyRepeat[day.DayOfWeek]" />
                        @day.ToString("ddd")
                    </span>
                }
            </div>
        </div>
    }
    else if (Repeater.RepeatType == RepeaterTypeDto.MonthlyAbsolute)
    {
        <div id="availability-monthly-exact" class="availability text-center">
            <div class="text-center mb-0 mt-1">
                <div class="container">
                    @for (int i = 1; i < 31;)
                    {
                        <div class="flex-row-center justify-content-around">
                            @for (int j = 1; j <= 7; j++)
                            {
                                var index = i - 1;
                                var selected = index <= 30 ? Repeater.MonthlyAbsoluteRepeat[index] : false;
                                var bgClass = selected ? "bg-primary text-white" : "text-muted";
                                <div class="m-1 w-100 text-center">

                                    <span class="lead badge border-1 @bgClass" style="cursor: pointer"
                                          @onclick="@(() => {
                                                          if(index <= 30) {
                                                              Repeater.MonthlyAbsoluteRepeat[index] = !Repeater.MonthlyAbsoluteRepeat[index];
                                                              StateHasChanged();
                                                          }
                                                      })">
                                        @(i <= 31 ? i.ToString("00") : "")
                                    </span>
                                </div>

                                i++;
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    else if (Repeater.RepeatType == RepeaterTypeDto.MonthlyRelative)
    {
        <div id="availability-monthly-by-week" class="availability text-center">
            <div class="text-center mb-0 mt-1">
                <div class="container text-end">
                    @for (int i = 1; i <= 4; i++)
                    {
                        int index = i;
                        string occuranceName = "";
                        if (i == 1)
                        {
                            occuranceName = "first";
                        }
                        else if (i == 2)
                        {
                            occuranceName = "second";
                        }
                        else if (i == 3)
                        {
                            occuranceName = "third";
                        }
                        else if (i == 4)
                        {
                            index = -1;
                            occuranceName = "last";
                        }
                        var occuranceString = $"On the {occuranceName} occurance:";

                        <div class="row align-items-center">

                            <p class="my-0 col-4 col-md-3 text-align-end">@occuranceString</p>

                            <div class="flex-row-center col-8 col-md-9 justify-content-start">
                                @for (int j = 0; j < 7; j++)
                                {
                                    var day = DateHelpers.StartOfWeek(ClientDate).AddDays(j);
                                    <span class="flex-row-center justify-content-between">
                                        <MudCheckBox @bind-Value="Repeater.MonthlyRelativeRepeat[index][day.DayOfWeek]" />
                                        @day.ToString("ddd")
                                    </span>
                                }
                            </div>
                        </div>
                    }
                </div>


            </div>
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public RepeaterModel Repeater { get; set; }

    [Parameter, EditorRequired]
    public bool AllowOneOff { get; set; }

    private string GetHeader()
    {
        switch (Repeater.RepeatType)
        {
            case null:
                return "One time, without repeats";

            case RepeaterTypeDto.Weekly:
                return "Offer this service every week on the days selected";

            case RepeaterTypeDto.MonthlyAbsolute:
                return "Offer this service every month on the same day (e.g. 7th of every month)";

            case RepeaterTypeDto.MonthlyRelative:
                return "Offer this service on the same week of every month (e.g. the second Thursday of every month)";

            default: return "";
        }
    }
}