@using Admin.Data.Events
@using Core.Dto;

<div class="day-col-container">
    <table class="scheduler-inner-table">
        <tbody>
            @for (int i = 0; i < 24; i++)
            {
                <tr><td class="cell-hour"></td></tr>
                <tr><td class="cell-half-hour"></td></tr>
            }
        </tbody>
    </table>

    @foreach (var item in Events)
    {
        if (item.HeightPx(Date, true) == 0)
        {
            continue;
        }

        <div class="event-container" style="--event-top: @(item.TopPx(Date, true))px;
                --event-height: @(item.HeightPx(Date, true))px;
                --event-left: @(item.LeftPc(Date))%;
                --event-width: @(item.WidthPc(Date))%;">
            <div class="event-padding" @onclick="(() => EditAppointment(item))">
                <div class="event" style="--event-top-unpadded: @(item.GetRelativeTopPx(Date))px;
                    --event-height-unpadded: @(item.GetRelativeHeightPc(Date))%;">
                    <p>@item.Appointment.Name</p>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public DateOnly Date { get; set; }

    [Parameter]
    public List<PositionedAppointment> Events { get; set; } = new List<PositionedAppointment>();

    [Parameter, EditorRequired]
    public EventCallback<AppointmentDto> OnAppointmentClick { get; set; }

    private async Task EditAppointment(PositionedAppointment dto)
    {
        await OnAppointmentClick.InvokeAsync(dto.Appointment);
    }
}