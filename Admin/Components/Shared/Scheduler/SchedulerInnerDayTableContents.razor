@using Admin.Components.Shared.Appointment
@using Admin.Data.Appointments;
@using Core.Dto.Appointment;

<div class="day-col-container">
    <table class="scheduler-inner-table">
        <tbody>
            @for (int i = 0; i < 24; i++)
            {
                <tr><td class="cell-hour"></td></tr>
                <tr><td class="cell-half-hour"></td></tr>
            }
        </tbody>
    </table>

    <TemplatedAppointments @ref="Appointments" Appointments="Events" Date="_date" Context="item">
        <AppointmentTemplate>
            <div class="event-container" style="--event-top: @(item.TopPx(Date, true))px;
                --event-height: @(item.HeightPx(Date, true))px;
                --event-left: @(item.LeftPc(Date))%;
                --event-width: @(item.WidthPc(Date))%;">
                <div class="event-padding">
                    <div class="event" style="--event-top-unpadded: @(item.GetRelativeTopPx(Date))px;
                    --event-height-unpadded: @(item.GetRelativeHeightPc(Date))%;">
                        <p>@item.Appointment.Name</p>
                    </div>
                </div>

                @if(Appointments.IsSyncedToTimeBlock(item))
                {
                    <span class="material-symbols-outlined position-absolute m-1 bottom-0 end-0 text-white fs-5">sync</span>
                }
                else if (Appointments.IsTimeBlockException(item))
                {
                    <span class="material-symbols-outlined position-absolute m-1 bottom-0 end-0 text-white fs-5">sync_disabled</span>
                }
            </div>
        </AppointmentTemplate>
    </TemplatedAppointments>
</div>

@code {
    [Parameter, EditorRequired]
    public DateOnly Date { get; set; }

    [Parameter]
    public List<PositionedAppointment> Events { get; set; } = new List<PositionedAppointment>();

    private DateTime _date => new DateTime(Date, new TimeOnly(0, 0));

    private TemplatedAppointments Appointments = default!;
}