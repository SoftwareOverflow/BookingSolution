@using Admin.Data.Events
@using Admin.Data.Helpers

@inherits ClientDateComponent

@inject AppointmentViewService EventService


<div class="scheduler-outer-container">
    <div class="flex-row-center header-row">
        <div class="left-indent" />
        @{
            var date = StartDate;

            while (date <= EndDate)
            {
                var localDate = date; //Copy the date variable as it changes later.
                var activeClass = date.Date == ClientDate ? "active" : "";
                if(StartDate.Date != EndDate.Date)
                {
                    <a class="day-date-header @activeClass" onclick="@(() => OnCalendarStateChange(CalendarLayoutType.Day, localDate))">
                        <div>@(date.ToString("ddd"))</div>
                        <div>@(date.Day)</div>
                    </a>
                } else
                {
                    <div class="day-date-header @activeClass">
                        <div>@(date.ToString("ddd"))</div>
                        <div>@(date.Day)</div>
                    </div>
                }

                date = date.AddDays(1);
            }
        }
    </div>
    <div class="scheduler-container">
        <table class="scheduler-outer-container">
            <tbody>
                <tr>
                    <td class="time-label-col">
                        <table class="scheduler-inner-table time-label-table">
                            <tbody>
                                @for (int i = 0; i < 24; i++)
                                {
                                    var time = new TimeOnly(0, 0);


                                    var label = time.AddHours(i).ToString("hh:mm tt");

                                    <SchedulerTimeRowLabel Time="@label" />
                                }
                            </tbody>
                        </table>
                    </td>

                    <td>
                        <div class="flex-row-center">
                            @{
                                date = StartDate;
                                while (date <= EndDate)
                                {
                                    <SchedulerInnerDayTableContents Date="@DateOnly.FromDateTime(date)" Events="@Events" />
                                    date = date.AddDays(1);
                                }
                            }
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
</div>
</div>


@code {

    [Parameter, EditorRequired]
    public DateTime StartDate { get; set; } = default!;

    [Parameter, EditorRequired]
    public DateTime EndDate { get; set; } = default!;

    [Parameter, EditorRequired]
    public List<PositionedAppointment> Events { get; set; } = [];

    [Parameter, EditorRequired]
    public Func<CalendarLayoutType, DateTime, Task> OnCalendarStateChange { get; set; } = default!;
}