@using Admin.Data.Events
@using Admin.Data.Helpers
@using MudBlazor.Extensions

@inject EventViewService EventService

<div class="scheduler-container" style="--scheduler-table-cell-height: @(EventLayoutConsts.CellHeight)px">
    <SchedulerHeader Date="@Date" LayoutType="@CalendarLayoutType" OnCalendarStateChange="OnCalendarStateChange" />
    @if (CalendarLayoutType == CalendarLayoutType.Month)
    {
        // TODO SchedulerMonth
    }
    else
    {
        <SchedulerDays StartDate="@(DateRange.Item1)" EndDate="@(DateRange.Item2)" Events="@Events"/>
    }
</div>

@code {

    private CalendarLayoutType CalendarLayoutType = CalendarLayoutType.Week;

    /// <summary>
    /// The selected date.
    /// </summary>
    private DateTime Date =
        DateTime.Now.StartOfWeek(
            System.Threading.Thread.CurrentThread.CurrentCulture.DateTimeFormat.FirstDayOfWeek
        );

    private Tuple<DateTime, DateTime> DateRange;

    private List<PositionedEventBooking> Events = [];

    protected override async Task OnParametersSetAsync()
    {
        DateRange = DateHelpers.GetDateRange(CalendarLayoutType, Date);
        Events = await LoadEvents();
    }

    private async void OnCalendarStateChange(CalendarLayoutType layoutType, DateTime date)
    {
        CalendarLayoutType = layoutType;
        Date = date;

        DateRange = DateHelpers.GetDateRange(layoutType, date);
        Events = await LoadEvents();

        StateHasChanged();
    }

    private async Task<List<PositionedEventBooking>> LoadEvents()
        => await EventService.GetEvents(DateOnly.FromDateTime(DateRange.Item1), DateOnly.FromDateTime(DateRange.Item2));
}
