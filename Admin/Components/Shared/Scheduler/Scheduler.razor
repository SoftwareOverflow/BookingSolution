@using Admin.Components.Pages
@using Admin.Data.Events
@using Admin.Data.Helpers
@using Microsoft.AspNetCore.Components.Rendering
@using MudBlazor.Extensions

@inherits LoadingPage

@inject AppointmentViewService EventService
@inject IJSRuntime JsInterop
@inject StateContainerSingle<DateTime> ClientDateContainer

<!-- Build the inherited RenderTree -->
@((RenderTreeBuilder builder) => base.BuildRenderTree(builder))

<div class="scheduler-container" style="--scheduler-table-cell-height: @(AppointmentLayoutConsts.CellHeight)px">
    <SchedulerHeader Date="@Date" LayoutType="@CalendarLayoutType" OnCalendarStateChange="OnCalendarStateChange" />
    @if (CalendarLayoutType == CalendarLayoutType.Month)
    {
        <SchedulerMonth StartDate="@(DateRange.Item1)" EndDate="@(DateRange.Item2)" Events="@Events" OnCalendarStateChange="OnCalendarStateChange" />
    }
    else
    {
        <SchedulerDays StartDate="@(DateRange.Item1)" EndDate="@(DateRange.Item2)" Events="@Events" OnCalendarStateChange="OnCalendarStateChange" />
    }
</div>

@code {

    private CalendarLayoutType CalendarLayoutType = CalendarLayoutType.Week;

    /// <summary>
    /// The selected date.
    /// Defaults to the server date as we're running on the server.
    /// </summary>
    private DateTime Date = DateTime.Now;

    private Tuple<DateTime, DateTime> DateRange = default!;

    private List<PositionedAppointment> Events = [];

    protected override void OnParametersSet()
    {
        DateRange = DateHelpers.GetDateRange(CalendarLayoutType, Date);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var localDate = await JavascriptHelpers.GetLocatDateAsync(JsInterop);
            if(localDate != null)
            {
                Date = localDate.Value;
            }

            ClientDateContainer.SetItem(Date);

            // Load data in any case, defaulting to server
            await OnCalendarStateChange(CalendarLayoutType, Date);
            StateHasChanged();
        }
    }

    private async Task OnCalendarStateChange(CalendarLayoutType layoutType, DateTime date)
    {
        CalendarLayoutType = layoutType;
        Date = date;

        DateRange = DateHelpers.GetDateRange(layoutType, date);
        Events = await LoadEvents();

        StateHasChanged();
    }

    private async Task<List<PositionedAppointment>> LoadEvents()
    {
        Loading = true;
        StateHasChanged();
        var result = await EventService.GetEvents(DateOnly.FromDateTime(DateRange.Item1), DateOnly.FromDateTime(DateRange.Item2));
        Loading = false;
        StateHasChanged();

        return result;
    }

    private async Task TestErrors() =>
        await EventService.GetEventsWithError();
}
