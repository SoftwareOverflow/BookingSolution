@using Admin.Components.Pages
@using Admin.Components.Shared.Appointment
@using Admin.Components.Shared.Loading
@using Admin.Data.Appointments
@using Admin.Data.Helpers
@using Core.Dto
@using Microsoft.AspNetCore.Components.Rendering
@using MudBlazor.Extensions

@inject AppointmentViewService EventService
@inject IJSRuntime JsInterop
@inject StateContainerSingle<DateTime> ClientDateContainer
@inject NavigationManager NavigationManager

<LoadingSpinner Visible="_loading" />

<div class="scheduler-container" style="--scheduler-table-cell-height: @(AppointmentLayoutConsts.CellHeight)px">
    <SchedulerHeader OnCreateAppointment="CreateAppointment" Date="@_date" LayoutType="@_calendarLayoutType" OnCalendarStateChange="OnCalendarStateChange" />
    @if (_calendarLayoutType == CalendarLayoutType.Month)
    {
        <SchedulerMonth StartDate="@(_dateRange.Item1)" EndDate="@(_dateRange.Item2)" Events="@_events" OnCalendarStateChange="OnCalendarStateChange" OnEditAppointment="EditAppointment" />
    }
    else
    {
        <SchedulerDays StartDate="@(_dateRange.Item1)" EndDate="@(_dateRange.Item2)" Events="@_events" OnCalendarStateChange="OnCalendarStateChange" OnEditAppointment="EditAppointment" />
    }

    @if (_appointmentToEdit != null)
    {
        <AppointmentForm Appointment="_appointmentToEdit" OnClose="OnAppointmentFormClosed"/>
    }
</div>

@code {

    private CalendarLayoutType _calendarLayoutType = CalendarLayoutType.Week;

    private AppointmentDto? _appointmentToEdit = null;

    /// <summary>
    /// The selected date.
    /// Defaults to the server date as we're running on the server.
    /// </summary>
    private DateTime _date = DateTime.Now;

    private Tuple<DateTime, DateTime> _dateRange = default!;

    private List<PositionedAppointment> _events = [];

    private bool _loading = true;

    protected override void OnParametersSet()
    {
        _dateRange = DateHelpers.GetDateRange(_calendarLayoutType, _date);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var localDate = await JavascriptHelpers.GetLocatDateAsync(JsInterop);
            if (localDate != null)
            {
                _date = localDate.Value;
            }

            ClientDateContainer.SetItem(_date);

            // Load data in any case, defaulting to server
            await OnCalendarStateChange(_calendarLayoutType, _date);
            StateHasChanged();
        }
    }

    private async Task OnCalendarStateChange(CalendarLayoutType layoutType, DateTime date)
    {
        _calendarLayoutType = layoutType;
        _date = date;

        _dateRange = DateHelpers.GetDateRange(layoutType, date);
        _events = await LoadEvents();

        var today = ClientDateContainer.GetItem();
        var nextApp = _events.FirstOrDefault(x => x.Appointment.StartTimePadded >= today);
        if (nextApp != null)
        {
            var timeOfDay = nextApp.Appointment.StartTimePadded.TimeOfDay.Subtract(TimeSpan.FromHours(1));
            if (timeOfDay.Ticks < 0)
            {
                timeOfDay = TimeSpan.Zero;
            }
            var startTime = TimeOnly.FromTimeSpan(timeOfDay);
        }
        StateHasChanged();
    }

    private async Task<List<PositionedAppointment>> LoadEvents()
    {
        _loading = true;
        var result = await EventService.GetEvents(DateOnly.FromDateTime(_dateRange.Item1), DateOnly.FromDateTime(_dateRange.Item2));
        
        _loading = false;

        return result;
    }

    private void CreateAppointment(DateTime dt)
    {
        _appointmentToEdit = new AppointmentDto("", new PersonDto())
            {
                StartTime = dt,
                EndTime = dt.AddHours(1)
            };
    }

    private void EditAppointment(AppointmentDto dto) => _appointmentToEdit = dto;

    private async Task OnAppointmentFormClosed(bool didEdit)
    {
        _appointmentToEdit = null;

        if (didEdit)
        {
            _events = await LoadEvents();
        }
    }
}
