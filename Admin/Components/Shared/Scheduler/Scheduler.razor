@using Admin.Components.Pages
@using Admin.Components.Shared.Appointment
@using Admin.Data.Events
@using Admin.Data.Helpers
@using Core.Dto
@using Microsoft.AspNetCore.Components.Rendering
@using MudBlazor.Extensions

@inherits LoadingPage

@inject AppointmentViewService EventService
@inject IJSRuntime JsInterop
@inject StateContainerSingle<DateTime> ClientDateContainer
@inject NavigationManager NavigationManager

<!-- Build the inherited RenderTree -->
@((RenderTreeBuilder builder) => base.BuildRenderTree(builder))

<div class="scheduler-container" style="--scheduler-table-cell-height: @(AppointmentLayoutConsts.CellHeight)px">
    <SchedulerHeader OnCreateAppointment="CreateAppointment" Date="@Date" LayoutType="@CalendarLayoutType" OnCalendarStateChange="OnCalendarStateChange" />
    @if (CalendarLayoutType == CalendarLayoutType.Month)
    {
        <SchedulerMonth StartDate="@(DateRange.Item1)" EndDate="@(DateRange.Item2)" Events="@Events" OnCalendarStateChange="OnCalendarStateChange" OnEditAppointment="EditAppointment" />
    }
    else
    {
        <SchedulerDays StartDate="@(DateRange.Item1)" EndDate="@(DateRange.Item2)" Events="@Events" OnCalendarStateChange="OnCalendarStateChange" OnEditAppointment="EditAppointment" />
    }

    @if (AppointmentToEdit != null)
    {
        <AppointmentForm Appointment="AppointmentToEdit" OnClose="OnAppointmentFormClosed"/>
    }
</div>

@code {

    private CalendarLayoutType CalendarLayoutType = CalendarLayoutType.Week;

    private AppointmentDto? AppointmentToEdit = null;

    /// <summary>
    /// The selected date.
    /// Defaults to the server date as we're running on the server.
    /// </summary>
    private DateTime Date = DateTime.Now;

    private Tuple<DateTime, DateTime> DateRange = default!;

    private List<PositionedAppointment> Events = [];

    protected override void OnParametersSet()
    {
        DateRange = DateHelpers.GetDateRange(CalendarLayoutType, Date);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var localDate = await JavascriptHelpers.GetLocatDateAsync(JsInterop);
            if (localDate != null)
            {
                Date = localDate.Value;
            }

            ClientDateContainer.SetItem(Date);

            // Load data in any case, defaulting to server
            await OnCalendarStateChange(CalendarLayoutType, Date);
            StateHasChanged();
        }
    }

    private async Task OnCalendarStateChange(CalendarLayoutType layoutType, DateTime date)
    {
        CalendarLayoutType = layoutType;
        Date = date;

        DateRange = DateHelpers.GetDateRange(layoutType, date);
        Events = await LoadEvents();

        var today = ClientDateContainer.GetItem();
        var nextApp = Events.FirstOrDefault(x => x.Appointment.StartTimePadded >= today);
        if (nextApp != null)
        {
            var startTime = TimeOnly.FromTimeSpan(nextApp.Appointment.StartTimePadded.TimeOfDay.Subtract(TimeSpan.FromHours(1)));
            NavigationManager.NavigateTo($"/#time-{startTime:HH}00");
        }
        StateHasChanged();
    }

    private async Task<List<PositionedAppointment>> LoadEvents()
    {
        Loading = true;
        StateHasChanged();
        var result = await EventService.GetEvents(DateOnly.FromDateTime(DateRange.Item1), DateOnly.FromDateTime(DateRange.Item2));
        Loading = false;
        StateHasChanged();

        return result;
    }

    private void CreateAppointment(DateTime dt)
    {
        AppointmentToEdit = new AppointmentDto("", new PersonDto())
            {
                StartTime = dt,
                EndTime = dt.AddHours(1)
            };
    }

    private void EditAppointment(AppointmentDto dto) => AppointmentToEdit = dto;

    private async Task OnAppointmentFormClosed(bool didEdit)
    {
        AppointmentToEdit = null;

        if (didEdit)
        {
            Events = await LoadEvents();
        }
    }
}
