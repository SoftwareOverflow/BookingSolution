@using Admin.Components.Pages
@using Admin.Components.Shared.Appointment
@using Admin.Components.Shared.Appointment.Form
@using Admin.Components.Shared.Loading
@using Admin.Data.Appointments
@using Admin.Data.Helpers
@using Core.Dto
@using Core.Dto.Appointment
@using Core.Extensions
@using Microsoft.AspNetCore.Components.Rendering
@using MudBlazor.Extensions

@inject AppointmentViewService EventService
@inject IJSRuntime JsInterop
@inject StateContainerSingle<DateTime> ClientDateContainer
@inject NavigationManager NavigationManager

<LoadingSpinner Visible="_loading" />

<div class="scheduler-container" style="--scheduler-table-cell-height: @(AppointmentLayoutConsts.CellHeight)px">
    <SchedulerHeader OnCreateAppointment="CreateAppointment" OnCreateTimeBlock="CreateTimeBlock" Date="@_date" LayoutType="@_calendarLayoutType" OnCalendarStateChange="OnCalendarStateChange" />

    <CascadingValue Value="this">
        @if (_calendarLayoutType == CalendarLayoutType.Month)
        {

            <SchedulerMonth StartDate="@(_dateRange.Item1)" EndDate="@(_dateRange.Item2)" Events="@_events" OnCalendarStateChange="OnCalendarStateChange" />
        }
        else
        {
            <SchedulerDays StartDate="@(_dateRange.Item1)"
                           EndDate="@(_dateRange.Item2)"
                           Events="@_events"
                           OnCalendarStateChange="OnCalendarStateChange" />
        }

        <EditableAppointmentForm AppointmentToEdit="_appointmentToEdit" />
    </CascadingValue>
</div>

@code {
    private CalendarLayoutType _calendarLayoutType = CalendarLayoutType.Week;

    private AppointmentDtoBase? _appointmentToEdit = null;

    /// <summary>
    /// The selected date.
    /// Defaults to the server date as we're running on the server.
    /// </summary>
    private DateTime _date = DateTime.Now;

    private Tuple<DateTime, DateTime> _dateRange = default!;

    private List<PositionedAppointment> _events = [];

    private bool _loading = true;

    protected override void OnParametersSet()
    {
        _dateRange = DateHelpers.GetDateRange(_calendarLayoutType, _date);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var localDate = await JavascriptHelpers.GetLocatDateAsync(JsInterop);
            if (localDate != null)
            {
                _date = localDate.Value;
            }

            ClientDateContainer.SetItem(_date);

            // Load data in any case, defaulting to server
            await OnCalendarStateChange(_calendarLayoutType, _date);
            StateHasChanged();
        }
    }

    private async Task OnCalendarStateChange(CalendarLayoutType layoutType, DateTime date)
    {
        _calendarLayoutType = layoutType;
        _date = date;

        _dateRange = DateHelpers.GetDateRange(layoutType, date);
        await LoadEvents();

        var today = ClientDateContainer.GetItem();
        var nextApp = _events.FirstOrDefault(x => x.Appointment.StartTimePadded >= today);
        if (nextApp != null)
        {
            var timeOfDay = nextApp.Appointment.StartTimePadded.TimeOfDay.Subtract(TimeSpan.FromHours(1));
            if (timeOfDay.Ticks < 0)
            {
                timeOfDay = TimeSpan.Zero;
            }
            var startTime = TimeOnly.FromTimeSpan(timeOfDay);
        }
        StateHasChanged();
    }

    /// <summary>
    /// Reload the calendar events from the server
    /// </summary>
    public async Task LoadEvents()
    {
        _loading = true;
        StateHasChanged();

        _events = await EventService.GetEvents(DateOnly.FromDateTime(_dateRange.Item1), DateOnly.FromDateTime(_dateRange.Item2));

        _loading = false;
        StateHasChanged();
    }

    private void CreateAppointment(DateTime dt)
    {
        var apt = new AppointmentDto("", new PersonDto())
            {
                StartTime = dt,
                EndTime = dt.AddHours(1)
            };
        _appointmentToEdit = apt;
    }

    private void CreateTimeBlock(DateTime dt)
    {
        var tb = new TimeBlockInstanceDto(Guid.Empty, "", DateOnly.FromDateTime(dt), IsException: false)
            {
                StartTime = dt,
                EndTime = dt.AddHours(1),
            };
        _appointmentToEdit = tb;
    }

    public void SetAppointmentToEdit(AppointmentDtoBase? dto)
    {
        _appointmentToEdit = dto;
        StateHasChanged();
    }
}
