@using Admin.Components.Shared
@using Admin.Components.Shared.Business
@using Admin.Data.Helpers
@using Admin.Routing
@using Auth.Components.Account.Shared
@using Core.Dto
@using Core.Interfaces
@using Core.Services
@using Microsoft.AspNetCore.Components.Authorization

@inherits LayoutComponentBase

@implements IDisposable

@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IMessageService MessageService

<header>
    <AuthorizeView>
        <Authorized>
            <TopNavBar OnSignOutClick="@(() => SignOut())" />
        </Authorized>
        <NotAuthorized>
            <TopNavBar Authorized="false" />
        </NotAuthorized>
    </AuthorizeView>
</header>

<main>
    @if (IsAccountRoute)
    {
        @Body
    }
    else
    {
        @Body
    }

    <MudThemeProvider />
    <MudPopoverProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />
</main>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private string? Username { get; set; } = null;

    [CascadingParameter]
    protected bool IsAccountRoute { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!IsAccountRoute)
        {
            MessageService.AddMessageListener(OnMessage);
        }
    }

    private void OnMessage(MessageBase message)
    {
        var severity = Severity.Normal;
        switch (message.Severity)
        {
            case MessageBase.MessageType.Success:
                severity = Severity.Success;
                break;
            case MessageBase.MessageType.Normal:
                severity = Severity.Normal;
                break;
            case MessageBase.MessageType.Warning:
                severity = Severity.Warning;
                break;
            case MessageBase.MessageType.Error:
                severity = Severity.Error;
                break;
        }

        Snackbar.Add(message.Message, severity);
    }

    private void SignOut()
    {
        NavigationManager.NavigateTo(UserService.GetSignOutPage(), true);
    }

    public void Dispose()
    {
        MessageService.RemoveMessageListener(OnMessage);
    }
}