@using Admin.Components.Shared
@using Admin.Data.Helpers
@using Auth.Components.Account.Shared
@using Core.Dto
@using Core.Interfaces
@using Core.Services
@using Microsoft.AspNetCore.Components.Authorization

@inherits LayoutComponentBase

@implements IDisposable

@inject IUserStateManager UserStateManager
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IMessageService MessageService

<header>
    <TopNavBar />
</header>

<main>
    @Body

    <div>
        @authMessage
        @userMessage
    </div>

    <button @onclick="SignOut">
        LogOut?
    </button>

    <MudThemeProvider />
    <MudPopoverProvider />
    <MudDialogProvider />
    <MudSnackbarProvider />
</main>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private string authMessage = "The user is NOT authenticated.";
    private string? userName = null;
    private string userMessage => (userName == null) ? "Hello, unknown" : $"Hello, {userName}" ;

    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                authMessage = $"{user.Identity.Name} is authenticated";
            }
        }


        UserStateManager.OnUserChange += OnUserChange;

        await UserStateManager.Load();

    }

    protected override void OnInitialized()
    {
        MessageService.AddMessageListener(OnMessage);
    }

    private void OnUserChange(string _userName){
        userName = _userName;
        StateHasChanged();
    }

    private void OnMessage(MessageBase message)
    {
        var severity = Severity.Normal;
        switch (message.Severity)
        {
            case MessageBase.MessageType.Success:
                severity = Severity.Success;
                break;
            case MessageBase.MessageType.Normal:
                severity = Severity.Normal;
                break;
            case MessageBase.MessageType.Warning:
                severity = Severity.Warning;
                break;
            case MessageBase.MessageType.Error:
                severity = Severity.Error;
                break;
        }

        Snackbar.Add(message.Message, severity);
    }

    private void SignOut()
    {
        NavigationManager.NavigateTo(UserStateManager.GetSignOutPage(), true);
    }

    public void Dispose()
    {
        MessageService.RemoveMessageListener(OnMessage);
        UserStateManager.OnUserChange -= OnUserChange;
    }
}