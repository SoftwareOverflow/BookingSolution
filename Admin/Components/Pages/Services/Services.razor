@page "/services"

@using Admin.Components.Shared.Loading
@using Admin.Data.Helpers
@using Core.Dto
@using Core.Interfaces
@using Microsoft.AspNetCore.Components.Rendering

@inject NavigationManager NavigationManager
@inject StateContainerSingle<ServiceTypeDto> StateContainer
@inject IServiceTypeService ServiceTypeService

<LoadingSpinner Visible="_loading" />

<h3>Manage The Services You Offer</h3>
<p class="lead text-muted">Saved changes will affect future bookings!</p>

<div class="container-md">
    <div class="row justify-content-center mb-2">
        <button type="button" class="btn btn-outline-primary btn-lg col-md-3 col-sm-6 d-flex" @onclick="CreateNewService">
            <span class="material-symbols-outlined px-2">data_saver_on</span>
            Offer a New Service
        </button>
    </div>
    <div class="row g-2 justify-content-start">
        @foreach (var item in _serviceTypes)
        {
            <div class="col col-md-4 col-sm-6">
                <div class="card m-2 position-relative h-100 text-center">
                    <div class="card-header bg-primary">
                        <button @onclick=@(() => EditServiceType(item))>
                            <h6 class="px-5 text-decoration-underline fw-bold">
                                @item.Name
                            </h6>
                        </button>
                    </div>
                    <div class="card-body bg-primary d-flex flex-column">
                        <div class="flex-grow-1" />
                        <p class="lead">@item.Price.ToString("C")</p>
                    </div>
                </div>
            </div>
        }
    </div>
</div>


@code {
    private bool _loading = true;

    private List<ServiceTypeDto> _serviceTypes = [];

    protected override async Task OnParametersSetAsync()
    {
        _loading = true;

        var result = await ServiceTypeService.GetServiceTypes();
        if (result.IsSuccess)
        {
            _serviceTypes = result.Result!;
        }
        else
        {
            // TODO show error messages..
        }

        await base.OnParametersSetAsync();

        _loading = false;
    }

    private void EditServiceType(ServiceTypeDto item)
    {
        StateContainer.SetItem(item);
        NavigationManager.NavigateTo("/Services/Edit");
    }

    private void CreateNewService()
    {
        NavigationManager.NavigateTo("/Services/Create");
    }
}