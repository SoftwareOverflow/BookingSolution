@page "/services"

@inherits LoadingPage

@using Admin.Data.Helpers
@using Core.Dto
@using Core.Interfaces

@inject NavigationManager NavigationManager
@inject StateContainerSingle<ServiceType> StateContainer
@inject IServiceTypeService ServiceTypeService

<h3>Manage The Services You Offer</h3>
<p class="lead text-muted">Saved changes will affect future bookings!</p>

<div class="container-md g-2">
    <div class="row justify-content-center">
        <button type="button" class="btn btn-outline-primary btn-lg col-md-3 col-sm-6">
            <span class="material-symbols-outlined">data_saver_on</span>
            Offer a New Service
        </button>
    </div>
    <div class="row g-2 justify-content-start">
        @foreach (var item in ServiceTypes)
        {
            <div class="col col-md-4 col-sm-6">
                <div class="card m-2 position-relative h-100 text-center">
                    <div class="card-header bg-primary">
                        <button @onclick=@(() => EditServiceType(item))>
                            <h6 class="px-5 text-decoration-underline fw-bold">
                                @item.Name
                            </h6>
                        </button>
                    </div>
                    <div class="card-body bg-primary d-flex flex-column">
                        <p class="text-muted fst-italic">
                            @item.Description
                        </p>
                        <div class="flex-grow-1" />
                        <p class="lead">£@item.Price</p>
                    </div>
                </div>
            </div>
        }
    </div>
</div>


@code {
    private List<ServiceType> ServiceTypes = [];
    private bool Loading = true;
    // private ServiceType? ServiceTypeInEdit = null;

    protected override async Task OnInitializedAsync()
    {
        ServiceTypes = await ServiceTypeService.GetServiceTypes();
        Loading = false;
        StateHasChanged();
    }

    private void EditServiceType(ServiceType item)
    {
        StateContainer.SetItem(item);
        NavigationManager.NavigateTo("/services/edit");
    }

    // private void SetEditMode(ServiceType service) => ServiceTypeInEdit = service;

    // private bool IsSelected(ServiceType item)
    // {
    //     if(ServiceTypeInEdit == null)
    //     {
    //         return true;
    //     }
    //     else if (item == ServiceTypeInEdit)
    //     {
    //         return true;
    //     }
    //     else
    //     {
    //         return false;
    //     }
    // }

    // private Task OpenEditDialogAsync(ServiceType serviceToEdit)
    // {
    //     var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = false, MaxWidth = MaxWidth.ExtraExtraLarge,};

    //     var parameters = new DialogParameters<EditServiceTypeDialog>
    //     {
    //         { x => x.ServiceType, serviceToEdit }
    //     };

    //     return DialogService.ShowAsync<EditServiceTypeDialog>(null, parameters, options);
    // }

    // private void EditServiceType(ServiceType serviceToEdit)
    // {
    //     NavigationManager.NavigateTo($"/services/edit/{serviceToEdit.Name}");
    // }
}