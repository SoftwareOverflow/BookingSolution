@page "/book/{BusinessGuid:guid}/{ServiceGuid:guid}"

@attribute [AllowAnonymous]

@using Admin.Components.Shared.Booking
@using Admin.Data.Booking
@using Core.Dto
@using Core.Interfaces
@using Microsoft.AspNetCore.Components.Rendering

@inject IBookingService BookingService
@inject IMessageService MessageService
@inject ISnackbar Snackbar

@implements IDisposable

@layout EmptyLayout

@inherits LoadingPage

<!-- Build the inherited RenderTree -->
@((RenderTreeBuilder builder) => base.BuildRenderTree(builder))


<div class="d-flex flex-column bg-light border-1 border-opacity-10 border-primary bg-light @BgClass">
    @if (IsError || BookingRequest == null)
    {
        // TODO show error page
        <div class="container">
            <p class="pt-3">Something isnt right here!</p>
        </div>
    }
    else if (RequestSent)
    {
        <div class="container flex-column-center text-center h-100">
            <h3>@(IsDemo ? "Example - " : "")Booking Request Sent</h3>
            <p class="lead">Your booking request has been sent to the business</p>
            <p>You'll get an email once they confirm your booking</p>
            <small>If you have any questions about your booking you should contact the business directly</small>

        </div>
    }
    else
    {
        <BookingForm Model="BookingRequest" IsDemo="IsDemo" OnRequestSent="OnRequestSent" />
    }
    <div class="flex-grow-1" />
    <div class="d-flex position-relative flex-row fixed-bottom justify-content-end pe-3 pb-3">
        <small>Powered by IndeBook</small>
    </div>
</div>

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@code {
    [Parameter]
    public Guid? BusinessGuid { get; set; }

    [Parameter]
    public Guid? ServiceGuid { get; set; }

    private ServiceTypeDto? ServiceTypeDto { get; set; } = null;

    [SupplyParameterFromQuery]
    public Boolean IsDemo { get; set; } = false;

    public bool IsError = false;

    public bool RequestSent = false;

    public string BgClass => IsDemo ? "watermark" : "";

    public BookingRequestModel? BookingRequest;

    protected override async Task OnParametersSetAsync()
    {
        if (BusinessGuid.HasValue && ServiceGuid.HasValue)
        {
            var result = await BookingService.GetNewBookingRequest(BusinessGuid.Value, ServiceGuid.Value);

            if (result.IsSuccess)
            {
                BookingRequest = new BookingRequestModel(result.Result!);
            }
            else
            {
                // TODO logging
            }

        }

        Loading = false;

        await base.OnParametersSetAsync();
        StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            MessageService.AddMessageListener(OnMessage);
            Snackbar.Configuration.PositionClass = MudBlazor.Defaults.Classes.Position.TopCenter;
        }

        base.OnAfterRender(firstRender);
    }

    // TODO check that it's inside an iFrame
    // TODO check the referer header

    private void OnRequestSent()
    {
        RequestSent = true;
    }

    private void OnMessage(MessageBase message)
    {
        var severity = Severity.Normal;
        switch (message.Severity)
        {
            case MessageBase.MessageType.Success:
                severity = Severity.Success;
                break;
            case MessageBase.MessageType.Normal:
                severity = Severity.Normal;
                break;
            case MessageBase.MessageType.Warning:
                severity = Severity.Warning;
                break;
            case MessageBase.MessageType.Error:
                severity = Severity.Error;
                break;
        }

        Snackbar.Add(message.Message, severity);
    }

    public void Dispose()
    {
        MessageService.RemoveMessageListener(OnMessage);
    }
}
