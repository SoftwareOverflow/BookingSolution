@page "/services"

@using Core.Dto
@using Core.Interfaces

@inject IServiceTypeService ServiceTypeService

<h3>Manage The Services You Offer</h3>
<p>Saved changes will affect future bookings!</p>

<div class="service-type-grid">
    @foreach (var item in ServiceTypes)
    {
        <div class="service-type-container">
            <div class="color-left" />
            <div class="edit-button">
                <span class="material-symbols-outlined edit">stylus_note</span>
            </div>
            <div class="service-type-inner">
                <div class="service-type-name">@item.Name</div>
                <div class="service-type-description">
                    @item.Description
                </div>
                <div class="flex-row space-evenly">
                    <div class="flex-row">
                        <span class="material-symbols-outlined">pin_drop</span>
                        @*TODO might move this kind of logic to an object for the UI which modifies the getter*@
                        @(String.IsNullOrWhiteSpace(item.Location) ? "Not Set" : @item.Location)
                    </div>
                    <div class="flex-row">
                        £@item.Price
                    </div>
                </div>
            </div>
        </div>
    }
</div>


@code {
    private List<ServiceType> ServiceTypes = [];

    protected override async Task OnInitializedAsync()
    {
        ServiceTypes = await ServiceTypeService.GetServiceTypes();
        StateHasChanged();
    }
}